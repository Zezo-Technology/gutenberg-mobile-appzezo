#!/bin/bash -eu

set -o pipefail

# This wraps calling xcodebuild in a function that passes the output to
# the xcbeautify formatter, but only if available.
#
# Output formatting is handy, but we don't want it to block running this
# script.
function _xcodebuild {
    FORMATTER=xcbeautify

    if command -v $FORMATTER &> /dev/null; then
        xcodebuild "$@" | $FORMATTER
    else
      echo "$FORMATTER not found, you will see raw xcodebuild output"
        xcodebuild "$@"
    fi
}

function log {
  if [[ $# -eq 1 ]]; then
    PREFIX=''
    MESSAGE=$1
  else
    PREFIX=":$1: "
    MESSAGE=$2
  fi

  if [[ -n "${BUILDKITE:-}" ]]; then
    echo "--- $PREFIX$MESSAGE"
  else
    echo "$MESSAGE"
  fi
}

function archive {
  PLATFORM=$1

  log "Archiving $SCHEME for $PLATFORM platform"

  _xcodebuild archive \
    -workspace "$WORKSPACE" \
    -scheme "$SCHEME" \
    -configuration Release \
    -sdk "$PLATFORM" \
    -archivePath "$ARCHIVES_ROOT/$PLATFORM.xcarchive" \
    -derivedDataPath "$DERIVED_DATA_PATH" \
    BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
    SKIP_INSTALL=NO
}

DERIVED_DATA_PATH=./DerivedData
DESTINATION='generic/platform=iOS'

rm -rf $DERIVED_DATA_PATH

MAIN_FRAMEWORK_NAME=Gutenberg
WORKSPACE="./XCFrameworkScaffold.xcworkspace"
SCHEME=$MAIN_FRAMEWORK_NAME

log "Building $SCHEME..."

_xcodebuild clean build \
  -workspace $WORKSPACE \
  -scheme $SCHEME \
  -destination "$DESTINATION" \
  -derivedDataPath "$DERIVED_DATA_PATH"

# See https://hackernoon.com/cocoapod-as-xcframework-with-dependencies
# and https://github.com/traveloka/ios-rn-prebuilt

ARCHIVES_ROOT=archives

PLATFORM_IOS=iphoneos
PLATFORM_SIMULATOR=iphonesimulator

FINAL_OUTPUT="$MAIN_FRAMEWORK_NAME.xcframework"

rm -rf "$ARCHIVES_ROOT"
rm -rf "$FINAL_OUTPUT"

# 1. Generate archives (xcarchive) for iOS and Simulator
archive $PLATFORM_IOS
archive $PLATFORM_SIMULATOR

# 2. Create XCFrameworks for every framework in the archives
XCFRAMEWORKS_DIR=xcframeworks

rm -rf $XCFRAMEWORKS_DIR
mkdir -p $XCFRAMEWORKS_DIR

# Notice how we loop on $PLATFORM_IOS as a way to get the frameworks for both platforms.
# We could use either platform to achieve the same result.
for FRAMEWORK in $(find "$ARCHIVES_ROOT/$PLATFORM_IOS.xcarchive/Products/Library/Frameworks" -type d -name "*.framework");
do
  CURRENT_FRAMEWORK_NAME=$(basename "$FRAMEWORK" .framework)

  # TODO: Use a framework list instead of building all of them?

  # 1. Create XCFrameworks for every framework that was generated by the main
  # framework build process
  FRAMEWORK_RELATIVE_PATH="Products/Library/Frameworks/$CURRENT_FRAMEWORK_NAME.framework"

  log 'package' "Creating XCFramework for $CURRENT_FRAMEWORK_NAME"

  _xcodebuild \
    -create-xcframework \
    -framework "$ARCHIVES_ROOT/$PLATFORM_IOS.xcarchive/$FRAMEWORK_RELATIVE_PATH" \
    -framework "$ARCHIVES_ROOT/$PLATFORM_SIMULATOR.xcarchive/$FRAMEWORK_RELATIVE_PATH" \
    -output "$XCFRAMEWORKS_DIR/$CURRENT_FRAMEWORK_NAME.xcframework"
done

log 'compression' 'Zipping Gutenberg XCFrameworks'
ZIP_PATH=$XCFRAMEWORKS_DIR/Gutenberg.zip
zip -rq "$ZIP_PATH" \
  $XCFRAMEWORKS_DIR/Aztec.xcframework \
  $XCFRAMEWORKS_DIR/Gutenberg.xcframework \
  $XCFRAMEWORKS_DIR/React.xcframework \
  $XCFRAMEWORKS_DIR/RNTAztecView.xcframework \
  $XCFRAMEWORKS_DIR/yoga.xcframework
echo "Gutenberg XCFrameworks ZIP generated at $ZIP_PATH"

# In parallel to the project to ship Gutenberg as an XCFramework we are also
# experimenting with adding React Native into other apps with an XCFramework.
#
# For convenience, we produce a ZIP with all the React Native XCFrameworks
# here, even though it would be more efficient to have a dedicated project that
# mirrors React Native and builds new one whenever a new version is released.
#
# In this current implementation, the approach is wasteful because we are
# publishing the same ZIP every time. A possible imporvement would be to track
# the RN version and check against the storage medium to see if an archive for
# that version is already available.
log 'compression' 'Zipping React XCFrameworks'
ZIP_PATH=$XCFRAMEWORKS_DIR/ReactNative.zip
zip -rq "$ZIP_PATH" $XCFRAMEWORKS_DIR -x \
  $XCFRAMEWORKS_DIR/Aztec.xcframework \
  $XCFRAMEWORKS_DIR/Gutenberg.xcframework \
  $XCFRAMEWORKS_DIR/RNTAztecView.xcframework \
  $XCFRAMEWORKS_DIR/Pods_Gutenberg.xcframework
echo "React Native XCFrameworks ZIP generated at $ZIP_PATH"
