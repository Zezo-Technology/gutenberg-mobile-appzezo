#!/bin/bash -eu

PLATFORM=$(uname -s)
ARCHITECTURE=$(uname -m)
NODE_VERSION=$(node --version)
PACKAGE_HASH=$(hash_file package-lock.json)
GUTENBERG_PACKAGE_HASH=$(hash_file gutenberg/package-lock.json)
JETPACK_PACKAGE_HASH=$(hash_file jetpack/pnpm-lock.yaml)
CACHEKEY="$BUILDKITE_PIPELINE_SLUG-npm-$PLATFORM-$ARCHITECTURE-node$NODE_VERSION-$PACKAGE_HASH-$GUTENBERG_PACKAGE_HASH"
PNPM_CACHEKEY="$BUILDKITE_PIPELINE_SLUG-pnpm-$PLATFORM-$ARCHITECTURE-node$NODE_VERSION-$JETPACK_PACKAGE_HASH"

echo "--- :npm: Restore cache if present"
restore_cache "$CACHEKEY"
restore_cache "$PNPM_CACHEKEY"

echo "--- :npm: Install Node dependencies"
npm ci --unsafe-perm --prefer-offline --no-audit --no-progress "$@"

echo "--- :npm: Save cache if necessary"
# Notice that we don't cache the local node_modules.
# Those get regenerated by npm ci as per Node reccomendations.
# What we are caching is the root npm folder, which stores pacakge downloads so they are available if the package.json resolution demands them.
save_cache "$HOME/.npm" "$CACHEKEY"

if [ "$PLATFORM" = "Darwin" ]; then
  PNPM_PATH="$HOME/Library/pnpm/store/v3"
elif [ "$PLATFORM" = "Linux" ]; then
  PNPM_PATH="$HOME/.local/share/pnpm/store/v3"
else
  echo "Unsupported platform: $PLATFORM."
  exit 1
fi

save_cache "$PNPM_PATH" "$PNPM_CACHEKEY"
